//max heap
 static int a[]=new int[100];
  static int size = -1;
  static void Insert(int element) 
  {
    size++;
    int i=size;
    a[i] = element;
    while (i>0 && a[(i-1)/2] < element) 
    {
      a[i] =a[(i-1) / 2];
      i= (i-1) / 2;
    }
    a[i] = element;
  }
  
  
  
  1 - add elemnt to last
  2 - cpmpare with parent until it is greater than the parent
  
  or 
  static void heapify(int[] arr, int n, int i)
    {
        // Find parent
        int parent = (i - 1) / 2;
     
        if (parent >= 0) {
            // For Max-Heap
            // If current node is greater than its parent
            // Swap both of them and call heapify again
            // for the parent
            if (arr[i] > arr[parent]) {
                 
                  // swap arr[i] and arr[parent]
                int temp = arr[i];
                arr[i] = arr[parent];
                arr[parent] = temp;
               
                // Recursively heapify the parent node
                heapify(arr, n, parent);
            }
        }
    }
 
    // Function to insert a new node to the heap. 
    static int insertNode(int[] arr, int n, int Key)
    {
        // Increase the size of Heap by 1
        n = n + 1;
     
        // Insert the element at end of Heap
        arr[n - 1] = Key;
     
        // Heapify the new node following a
        // Bottom-up approach
        heapify(arr, n, n - 1);
         
        // return new size of Heap
        return n;
    }
