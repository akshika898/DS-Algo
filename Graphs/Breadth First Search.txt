class Solution {
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        Map<Integer, Boolean> visited = new HashMap<Integer, Boolean>();
        ArrayList<Integer> ans = new ArrayList<Integer>();
        for(int i=0; i<V; i++) {
            if (!visited.containsKey(i) || !visited.get(i))
               bfs(adj, visited, ans, i);
        }

        return ans;
    }
    
    public void bfs(ArrayList<ArrayList<Integer>> adj, Map<Integer, Boolean> visited, ArrayList<Integer> ans, int node){
        Queue<Integer> q = new LinkedList<Integer>();
        q.add(node);
        visited.put(node, true);
        while(!q.isEmpty()){
            int first = q.remove();
            ans.add(first);
            for(int i: adj.get(first)){
                if(!visited.containsKey(i) || !visited.get(i)){
                    q.add(i);
                    visited.put(i, true);
                }
            }
        }
    }
}




















class Graph {
    int vertices;
    LinkedList<Integer>[] adjList;
 
    Graph(int vertices)
    {
        this.vertices = vertices;
        adjList = new LinkedList[vertices];
        for (int i = 0; i < vertices; ++i)
            adjList[i] = new LinkedList<>();
    }
 
    void addEdge(int u, int v) { adjList[u].add(v); }
    
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        Map<Integer, Boolean> visited = new HashMap<Integer, Boolean>();
        ArrayList<Integer> ans = new ArrayList<Integer>();
        for(int i=0; i<V; i++) {
            if (!visited.containsKey(i) || !visited.get(i))
               bfs(adj, visited, ans, i);
        }

        return ans;
    }
 
    public void bfs(ArrayList<ArrayList<Integer>> adj, Map<Integer, Boolean> visited, ArrayList<Integer> ans, int node){
        Queue<Integer> q = new LinkedList<Integer>();
        q.add(node);
        visited.put(node, true);
        while(!q.isEmpty()){
            int first = q.remove();
            ans.add(first);
            for(int i: adj.get(first)){
                if(!visited.containsKey(i) || !visited.get(i)){
                    q.add(i);
                    visited.put(i, true);
                }
            }
        }
    }
}



public class Main {
    public static void main(String[] args)
    {
        // Number of vertices in the graph
        int vertices = 5;
 
        // Create a graph
        Graph graph = new Graph(vertices);
 
        // Add edges to the graph
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 4);
 

        graph.bfsOfGraph(0);
    }
}
