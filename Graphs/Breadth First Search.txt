class Solution {
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        Map<Integer, Boolean> visited = new HashMap<Integer, Boolean>();
        ArrayList<Integer> ans = new ArrayList<Integer>();
        for(int i=0; i<V; i++) {
            if (!visited.containsKey(i) || !visited.get(i))
               bfs(adj, visited, ans, i);
        }

        return ans;
    }
    
    public void bfs(
        ArrayList<ArrayList<Integer>> adj,
        Map<Integer, Boolean> visited,
        ArrayList<Integer> ans,
        int node
    ){
        Queue<Integer> q = new LinkedList<Integer>();
        q.add(node);
        visited.put(node, true);
        while(!q.isEmpty()){
            int first = q.remove();
            ans.add(first);
            for(int i: adj.get(first)){
                if(!visited.containsKey(i) || !visited.get(i)){
                    q.add(i);
                    visited.put(i, true);
                }
            }
        }
    }
}
