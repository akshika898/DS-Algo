class Solution {
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        Map<Integer, Boolean> visited = new HashMap<Integer, Boolean>();
        for(int i=0; i<V; i++) {
            if (!visited.containsKey(i) || !visited.get(i))
               if(bfsCyclic(adj, visited, i) == true){
                   return true;
               } OR
               if(dfsCyclic(adj, visited, i, -1) == true){
                   return true;
               }
               
        }

        return false;
    }
    
    public boolean bfsCyclic(
        ArrayList<ArrayList<Integer>> adj,
        Map<Integer, Boolean> visited,
        int node
    ){
        Queue<Integer> q = new LinkedList<Integer>();
        Map<Integer, Integer> parent = new HashMap<Integer, Integer>();
        q.add(node);
        parent.put(node, -1);
        visited.put(node, true);
        while(!q.isEmpty()){
            int first = q.remove();
            for(int neighbour: adj.get(first)){
                if(!visited.containsKey(neighbour) || !visited.get(neighbour)){
                    q.add(neighbour);
                    visited.put(neighbour, true);
                    parent.put(neighbour, first);
                }
                else if (visited.get(neighbour) && parent.containsKey(neighbour) && parent.get(first) != neighbour){
                    return true;
                }
            }
        }
        return false;
    }
    
    public boolean dfsCyclic(
        ArrayList<ArrayList<Integer>> adj,
        Map<Integer, Boolean> visited,
        int node,
        int parent
    ){
        visited.put(node, true);

        for (int neighbour: adj.get(node)) {
            if(!visited.containsKey(neighbour) || !visited.get(neighbour)){
                if(dfsCyclic(adj, visited, neighbour, node)){
                    return true;
                }
            }
            else if(parent != neighbour){
                return true;
            }
        }
        return false;
    }
}

