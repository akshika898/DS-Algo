public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        Map<Integer, Boolean> visited = new HashMap<Integer, Boolean>();
        Map<Integer, Boolean> dfsVisited = new HashMap<Integer, Boolean>();
        for(int i=0; i<V; i++) {
            if (!visited.containsKey(i) || !visited.get(i))
               if(dfsCyclic(adj, visited, dfsVisited, i) == true){
                   return true;
               }
        }

        return false;
    }
    
    public boolean dfsCyclic(
        ArrayList<ArrayList<Integer>> adj,
        Map<Integer, Boolean> visited,
        Map<Integer, Boolean> dfsVisited,
        int node
    ){
 
        visited.put(node, true);
        dfsVisited.put(node, true);

        for(int neighbour: adj.get(node)){
            if(!visited.containsKey(neighbour) || !visited.get(neighbour)){
                if(dfsCyclic(adj, visited, dfsVisited, neighbour)){
                    return true;
                }
            }
            else if (dfsVisited.containsKey(neighbour) && dfsVisited.get(neighbour)){
                return true;
            }
        }
        dfsVisited.put(node, false);
        return false;
    }
