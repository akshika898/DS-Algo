  static int lca(Node root, int k1, int k2) {
    if(root==null ||( root.leftChild==null&&root.rightChild==null))
      return -1;
    while(root!=null)
    {
      if(root.data<k1&&root.data<k2)
        root=root.rightChild;
      else if(root.data>k1&&root.data>k2)
        root=root.leftChild;
      else 
        break;
    }
return root.data;
  }



recursion 

if (node == null)
            return null;
  
// If both n1 and n2 are smaller than root, then LCA lies in left
if (node.data > n1 && node.data > n2)
    return lca(node.left, n1, n2);

// If both n1 and n2 are greater than root, then LCA lies in right
if (node.data < n1 && node.data < n2)
    return lca(node.right, n1, n2);

return node;
