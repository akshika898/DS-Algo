Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character




class Solution {
    public int minDistance(String word1, String word2) {
        int dp[][] = new int[word1.length()][word2.length()];
        for(int i=0;i<word1.length(); i++){
            for(int j=0; j<word2.length(); j++){
                dp[i][j] = -1;
            }
        }
        return solve(word1, word2, 0, 0, dp);
    }
    
    public int solve(String word1, String word2, int i, int j, int[][] dp){
        if(i == word1.length()){
            return word2.length() - j;
        }
        if(j == word2.length()){
            return word1.length() - i;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        
        int ans = 0;
        if(word1.charAt(i) == word2.charAt(j))
            return solve(word1, word2, i+1, j+1, dp);
        else {
            int insert = 1 + solve(word1, word2, i, j+1, dp);
            int delete = 1 + solve(word1, word2, i+1, j, dp);
            int replace = 1 + solve(word1, word2, i+1, j+1, dp);
            ans = Math.min(insert, Math.min(delete, replace));
        }
        return dp[i][j] = ans;
    }
}
