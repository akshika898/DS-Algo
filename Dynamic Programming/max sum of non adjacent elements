recursion

int findMaxSum(int arr[], int n) {
        return find(arr, n-1);
    }
    
    int find(int[] arr, int n){
        if(n==0) return arr[0];
        if(n<0) return 0;
        
        int include = find(arr, n-2) + arr[n];
        int exclude = find(arr, n-1);
        
        return Math.max(include, exclude);
    }
    
    
    
 dp
 
 int findMaxSum(int arr[], int n) {
        int dp[] = new int[n];
        for (int i=0;i<n;i++) dp[i] = -1;
        return find(arr, n-1, dp);
    }
    
    int find(int[] arr, int n, int[] dp){
        if(n==0) return arr[0];
        if(n<0) return 0;
        
        if(dp[n] != - 1){
            return dp[n];
        }
        int include = find(arr, n-2, dp) + arr[n];
        int exclude = find(arr, n-1, dp);
        
        dp[n] = Math.max(include, exclude);
        return dp[n];
    }
    
    
    
Also house robber question is same  just that instead of single lin max sum in circle so first and last elements cannot be considered together as adjacent are not allowed
 
 approach same code - just first we ignore first element and write code for  arr[1] ---- arr[n]
 then ignore last emlent and write code for arr[0] ----- arr[n-1]
 create 2 arrays then then find max of both
