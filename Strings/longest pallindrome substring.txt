public String longestPalindrome(String s) {
    if (s == null || s.length() < 1) return "";
    int start = 0, end = 0;
    for (int i = 0; i < s.length(); i++) {
        int len1 = expandAroundCenter(s, i, i);
        int len2 = expandAroundCenter(s, i, i + 1);
        int len = Math.max(len1, len2);
        if (len > end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }
    return s.substring(start, end + 1);
}

private int expandAroundCenter(String s, int left, int right) {
    int L = left, R = right;
    while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
        L--;
        R++;
    }
    return R - L - 1;
}



brute for n^3
(check all substrings) n^2 + n (to find each substr is pallindrome)





n2 approach

public String longestPalindrome(String s) {
        int len=1;
        String res="";
        for (int i=0; i<s.length(); i++) {
            int l = i, r=i;
            while(l>=0 && r<s.length() && s.charAt(l) == s.charAt(r)){
                l--;
                r++;
            }
            if (r-l+1 > len) {
                res = s.substring(l+1, r);
                len = r-l+1;
            }
            l=i;
            r=i+1;
            while(l>=0 && r<s.length() && s.charAt(l) == s.charAt(r)){
                l--;
                r++;
            }
            if (r-l+1 > len) {
                res = s.substring(l+1, r);
                len = r-l+1;
            }
        }
        return res;
    }
