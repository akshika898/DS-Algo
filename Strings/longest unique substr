Length of the longest substring without repeating characters
Example 1:
Input: “ABCDEFGABEF”
Output: 7
Explanation: The longest substring without repeating characters are “ABCDEFG”, “BCDEFGA”, and “CDEFGAB” with lengths of 7

Example 2:
Input: “GEEKSFORGEEKS”
Output: 7
Explanation: The longest substrings without repeating characters are “EKSFORG” and “KSFORGE”, with lengths of 7


public static int longestUniqueSubsttr(String str) {
        if (str.length() == 0)
            return 0;

        if (str.length() == 1)
            return 1;

        int maxLength = 0;
        HashSet<Character> set = new HashSet<>();

        int left = 0, right = 0;
        while (right < str.length()) {
            if (set.contains(str.charAt(right))) {
                while (set.contains(str.charAt(right))) {
 
                    set.remove(str.charAt(left));
                    left++;
                }
            }

            set.add(str.charAt(right));
            maxLength = Math.max(maxLength, (right - left + 1));
            right++;
        }
        return maxLength;
    }
    
    
    // https://www.youtube.com/watch?v=qtVh-XEpsJo&t=1084s&ab_channel=takeUforward
    
    optimised version
    
    static int longestUniqueSubsttr(String str) {
        int n = str.length();
        int res = 0;
        HashMap<Character, Integer> lastIndex = new HashMap<>();
        
        int i = 0;


        for (int j = 0; j < n; j++) {
            char currentChar = str.charAt(j);
    
            if (lastIndex.containsKey(currentChar)) {
                i = Math.max(i, lastIndex.get(currentChar) + 1);
            }

            res = Math.max(res, j - i + 1);

            lastIndex.put(currentChar, j);
        }
        return res;
    }
