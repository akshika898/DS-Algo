two elements a[i] and a[j] form an inversion 
if a[i] > a[j] and i < j.
 

0(n2)

static int getInvCount(int n)
    {
        int inv_count = 0;
        for (int i = 0; i < n - 1; i++)
            for (int j = i + 1; j < n; j++)
                if (arr[i] > arr[j])
                    inv_count++;

        return inv_count;
    }


o(nlogn) --better for interview merge sort

https://www.youtube.com/watch?v=AseUmwVNaoY&ab_channel=takeUforward
    private static int mergeAndCount(int[] arr, int l, int m, int r)
    {
 
        int[] left = Arrays.copyOfRange(arr, l, m + 1);
        int[] right = Arrays.copyOfRange(arr, m + 1, r + 1);
 
        int i = 0, j = 0, k = l, count = 0;
 
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j])
                arr[k++] = left[i++];
            else {
                arr[k++] = right[j 
                count += (m + 1) - (l + i);
            }
        }
        while (i < left.length)
            arr[k++] = left[i++];
        while (j < right.length)
            arr[k++] = right[j++];
        return count;
    }
 
    // Merge sort function
    private static int mergeSortAndCount(int[] arr, int l,  int r)
    {
 
        int count = 0;
 
        if (l < r) {
            int m = (l + r) / 2;
 
            // Total inversion count = left subarray count + right subarray count + merge count
 
            count += mergeSortAndCount(arr, l, m);
            count += mergeSortAndCount(arr, m + 1, r);
            count += mergeAndCount(arr, l, m, r);
        }
 
        return count;
    }
 
 
      mergeSortAndCount(arr, 0, arr.length - 1);

