Input: 7
Output: 2, 3, 5, 7

Input: 13
Output: 2, 3, 5, 7, 11, 13 


0(n2)
static boolean isPrime(int n) 
{  
if (n <= 1) 
    return false; 
  
for (int i = 2; i < n; i++) 
    if (n % i == 0) 
        return false; 
  
return true; 
} 
static void printPrime(int n) 
{ 
for (int i = 2; i <= n; i++)  
{ 
    if (isPrime(i)) 
        System.out.print(i + " "); 
} 
} 


-----------------------------
bettter approach
-------------------------------------

    void sieveOfEratosthenes(int n)
    {
        boolean prime[] = new boolean[n + 1];
        for (int i = 0; i <= n; i++)
            prime[i] = true;
 
        for (int p = 2; p * p <= n; p++) {
     
            if (prime[p] == true) {
                // Update all multiples of p greater than or
                // equal to the square of it numbers which
                // are multiple of p and are less than p^2
                // are already been marked.
                for (int i = p * p; i <= n; i += p)
                    prime[i] = false;
            }
        }
 
        // Print all prime numbers
        for (int i = 2; i <= n; i++) {
            if (prime[i] == true)
                System.out.print(i + " ");
        }
    }
