count subarr with sum k


prefix sum
sum = k + (sum - k)

class Solution {
    public int subarraySum(int[] nums, int k) {
        HashMap<Integer, Integer> hm = new HashMap<>();
        hm.put(0,1);
        int count = 0; 
        int sum =0;
        for(int i=0; i< nums.length; i++){
            sum += nums[i];
             if (hm.containsKey(sum-k))
                count += hm.get(sum-k);
 
            hm.put(sum,hm.getOrDefault(sum,0)+1);
        }
        return count;
    }
}



longest subarr with sum k

public static int getLongestSubarray(int []a, int k) {
        int n = a.length; // size of the array.

        Map<Integer, Integer> preSumMap = new HashMap<>();
        int sum = 0;
        int maxLen = 0;
        for (int i = 0; i < n; i++) {
            sum += a[i];

            if (sum == k) {
                maxLen = Math.max(maxLen, i + 1);
            }


            if (preSumMap.containsKey(sum-k)) {
                int len = i - preSumMap.get(sum-k);
                maxLen = Math.max(maxLen, len);
            }

            if (!preSumMap.containsKey(sum)) {
                preSumMap.put(sum, i);
            }
        }

        return maxLen;
    }

