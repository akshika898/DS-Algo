method1: 0(nlogn)

  public static int kthSmallest(Integer[] arr, int k) 
    { 
        Arrays.sort(arr); 
        return arr[k - 1]; 
    }


 method 2: heap
 Time Complexity: O(N + (N â€“ K) * log(K) )
 static void kth_Largest_MaxHeap(int[] arr, int k) {

        PriorityQueue<Integer>pq= new PriorityQueue<>((a,b)->b-a); or PriorityQueue<Integer>pq= new PriorityQueue<>(Collections.reverseOrder());
        

        for (int i = 0; i < arr.length; i++) {
            pq.add(arr[i])  ;
        }

        for(int i=0;i<k-1;i++){
            pq.remove();
        }

        System.out.println(pq.peek())  ;
    }

    static void kth_Smallest_MinHeap(int[] arr, int k) {

        PriorityQueue<Integer>pq= new PriorityQueue<>();

        for (int i = 0; i < arr.length; i++) {
            pq.add(arr[i])  ;
        }

        for(int i=0;i<k-1;i++){
            pq.remove();
        }

        System.out.println(pq.peek())  ;
    }
 
public static void main(String args[]) {

    int arr[] = {1, 2, 6, 4, 5, 3}  ;

    kth_Largest_MaxHeap(arr, 3)  ;
    kth_Smallest_MinHeap(arr, 3)  ;
}





