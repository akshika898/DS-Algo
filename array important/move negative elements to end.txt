// more time
void moveElements(int arr[], int n)
{
  int c=0,temp;
  for(int i=0;i<n-c;i++)
  {
    if(arr[i]<0)
    {
      temp=arr[i];
      for(int j=i;j<n-1;j++)
      {
        arr[j]=arr[j+1];
      }
      arr[n-1]=temp;
      c++;
      i--;
    }
  }
}

//more space

 static void segregateElements(int arr[], int n) 
    { 
        int temp[] = new int[n]; 
        //store +ve element 
        int j = 0; 
        for (int i = 0; i < n; i++) 
            if (arr[i] >= 0) 
                temp[j++] = arr[i]; 
  
        // If array contains all positive or negative. 
        if (j == n || j == 0) 
            return; 
  
        // Store -ve element in temp array 
        for (int i = 0; i < n; i++) 
            if (arr[i] < 0) 
                temp[j++] = arr[i]; 
  
        // Copy contents of temp[] to arr[] 
        for (int i = 0; i < n; i++) 
            arr[i] = temp[i]; 
    }
    
    
    
    // if order not maintained
    
    public static void swap(int[] ar, int i, int j) 
    { 
        int t = ar[i]; 
        ar[i] = ar[j]; 
        ar[j] = t; 
    } 
  
    public static void move(int[] ar) 
    { 
        int low = 0; 
        int high = ar.length - 1; 
        while (low <= high) { 
            if (ar[low] <= 0) 
                low++; 
            else
                swap(ar, low, high--); 
        } 
    } 
    
    
    or 
    static void rearrange(int arr[], int n) 
    { 
        int j = 0, temp; 
        for (int i = 0; i < n; i++) { 
            if (arr[i] < 0) { 
                if (i != j) { 
                    temp = arr[i]; 
                    arr[i] = arr[j]; 
                    arr[j] = temp; 
                } 
                j++; 
            } 
        } 
    } 
