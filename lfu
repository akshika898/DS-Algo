import java.util.*;


class LFUCache {
    final int capacity;
    int curSize;
    int minFrequency;
    Map<Integer, DLLNode> cache;
    Map<Integer, DoubleLinkedList> frequencyMap;

    public LFUCache(int capacity) {
        this.capacity = capacity;
        this.curSize = 0;
        this.minFrequency = 0;
        this.cache = new HashMap<>();
        this.frequencyMap = new HashMap<>();
    }

 
    public int get(int key) {
        Node curNode = cache.get(key);
        if (curNode == null) {
            return -1;
        }
        updateNode(curNode);
        return curNode.val;
    }


    public void put(int key, int value) {
        // if the cache size is 0
        if (capacity == 0) {
            return;
        }
        // if the key already exists, update its frequency 
        if (cache.containsKey(key)) {
            DLLNode curNode = cache.get(key);
            curNode.val = value;
            updateNode(curNode);
        }
        // if the key does not exist
        else {
            curSize++;
            if (curSize > capacity) {
                // get minimum frequency list 
                DoubleLinkedList minFreqList = frequencyMap.get(minFrequency);
                cache.remove(minFreqList.tail.prev.key);
                minFreqList.removeNode(minFreqList.tail.prev);
                curSize--;
            }
            // reset min frequency to 1 because of adding new node 
            minFrequency = 1;
            DLLNode newNode = new DLLNode(key, value);
            /** get the list with frequency 1, and then add new node into the list, as well as into LFU cache **/
            DoubleLinkedList curList = frequencyMap.getOrDefault(1, new DoubleLinkedList());
            curList.addNode(newNode);
            frequencyMap.put(1, curList);
            cache.put(key, newNode);
            System.out.println("Cache block "+key+" added");
        }
    }
    

    public void updateNode(Node curNode) {
        int curFreq = curNode.frequency;
        DoubleLinkedList curList = frequencyMap.get(curFreq);
        curList.removeNode(curNode);

        /** if the current list is the last list which has lowest frequency and the current node is the only node in that list, we need to remove the entire list and then increase min frequency value by 1 **/
        if (curFreq == minFrequency && curList.listSize == 0) {
            minFrequency++;
        }

        curNode.frequency++;

        /** add the current node to another list having current frequency + 1,
         if we do not have the list with this frequency, initialise it **/
        DoubleLinkedList newList =     frequencyMap.getOrDefault(curNode.frequency, new DoubleLinkedList());
        newList.addNode(curNode);
        frequencyMap.put(curNode.frequency, newList);
    }

    class Node {
        int key;
        int val;
        int frequency;
        Node prev;
        Node next;

        public Node(int key, int val) {
            this.key = key;
            this.val = val;
            this.frequency = 1;
        }
    }

    // Implementing Doubly Linked List 
    class DoubleLinkedList {
        int listSize;
        DLLNode head;
        DLLNode tail;
        public DoubleLinkedList() {
            this.listSize = 0;
            this.head = new DLLNode(0, 0);
            this.tail = new DLLNode(0, 0);
            head.next = tail;
            tail.prev = head;
        }

        /** add new node into head of list and increase list size by 1 **/
        public void addNode(DLLNode curNode) {
            Node nextNode = head.next;
            curNode.next = nextNode;
            curNode.prev = head;
            head.next = curNode;
            nextNode.prev = curNode;
            listSize++;
        }

        // remove input node and decrease list size by 1
        public void removeNode(DLLNode curNode) {
            DLLNode prevNode = curNode.prev;
            DLLNode nextNode = curNode.next;
            prevNode.next = nextNode;
            nextNode.prev = prevNode;
            listSize--;
        }
    }

    // Driver code
    public static void main(String args[]) {
        LFUCache obj=new LFUCache(3);
        obj.put(1,10);
        obj.put(2,20);
        obj.put(3,30);
        obj.put(4,40);
        int val=obj.get(3);
        System.out.println("The value against cache block 3 is "+val);
    }
}

