public class NQueenProblem {
  final int N = 4;

  void printSolution(int board[][])
    {
	for (int i = 0; i < N; i++) {
	  for (int j = 0; j < N; j++)
	    System.out.print(" " + board[i][j] + " ");
	  System.out.println();
	}
  }

  boolean isSafe(int board[][], int row, int col)
    {
	int i, j;

	// Check row on left side
	for (i = 0; i < col; i++)
	    if (board[row][i] == 1)
		return false;

	// Check upper diagonal on left side
       for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
	    if (board[i][j] == 1)
		return false;

       // Check lower diagonal on left side
	for (i = row, j = col; j >= 0 && i < N; i++, j--)
	    if (board[i][j] == 1)
		return false;

	return true;
   }
NOTE : no need to check up and down column because once a queen is placed we proceed further so col will have 1 queen, no need to check up and down right diagols because we have not travelled through them yet;


  boolean solveNQUtil(int board[][], int col)
    {
      // base case: If all queens are placed
      if (col >= N)
	return true;

      for(int i=0; i < N; i++) {
	if (isSafe(board, i, col)) {            // Check if the queen can be placed on board[i][col]
	  board[i][col] = 1;

	  if (solveNQUtil(board, col + 1) == true)
	    return true;

          board[i][col] = 0; // BACKTRACK
	}
     }

     /* If the queen can not be placed in any row in this col, then return false */
     return false;
    }

	boolean solveNQ()
	{
		int board[][] = {{ 0, 0, 0, 0 },
				  { 0, 0, 0, 0 },
				  { 0, 0, 0, 0 },
				  { 0, 0, 0, 0 },
				};

		if (solveNQUtil(board, 0) == false) {
			return false;
		}

		printSolution(board);
		return true;
	}

	public static void main(String args[])
	{
		NQueenProblem Queen = new NQueenProblem();
		Queen.solveNQ();
	}
}


