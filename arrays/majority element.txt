 //element that occurs more than n/2 times

1==>brute force n2 comp

public int majority(int[] a) {
       int n=a.length,c=1;

        for(int i=0;i<n;i++)
        {
            c=1;
            for(int j=i+1;j<n;j++)
            {
                if(a[i]==a[j])
                    c++;
            }
            if(c>n/2)
                return a[i];
        }
        return -1;
    }


2==> 0(nlogn)

class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}


or moores voting algo

	void printMajority(int a[], int size)
	{
		/* Find the candidate for Majority*/
		int cand = findCandidate(a, size);

		/* Print the candidate if it is Majority*/
		if (isMajority(a, size, cand))
			System.out.println(" " + cand + " ");
		else
			System.out.println("No Majority Element");
	}


	int findCandidate(int a[], int size)
	{
		int maj_index = 0, count = 1;
		int i;
		for (i = 1; i < size; i++) {
			if (a[maj_index] == a[i])
				count++;
			else
				count--;
			if (count == 0) {
				maj_index = i;
				count = 1;
			}
		}
		return a[maj_index];
	}

	boolean isMajority(int a[], int size, int cand)
	{
		int i, count = 0;
		for (i = 0; i < size; i++) {
			if (a[i] == cand)
				count++;
		}
		if (count > size / 2)
			return true;
		else
			return false;
	}
]


